name: Deploy to Production (Simple)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          # Строим образ (используем простой Dockerfile для избежания проблем)
          docker build -f Dockerfile.simple -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
          
          # Добавляем дополнительный тег с SHA коммита
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
                     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Пушим оба тега
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Переходим в директорию приложения
            cd /opt/sobranie-api || mkdir -p /opt/sobranie-api && cd /opt/sobranie-api
            
            # Загружаем docker-compose файл
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml -o docker-compose.yml
            
            # Проверяем наличие .env.production
            if [ ! -f .env.production ]; then
              echo "❌ Файл .env.production не найден!"
              echo "Создайте его с помощью:"
              echo "cp .env.production.example .env.production"
              echo "nano .env.production"
              exit 1
            fi
            
            # Останавливаем старый контейнер
            docker-compose down || true
            
            # Загружаем новый образ
            docker-compose pull
            
            # Запускаем новый контейнер
            docker-compose up -d
            
            # Ждем запуска
            sleep 10
            
            # Проверяем здоровье
            if curl -f http://localhost:3010/healthz > /dev/null 2>&1; then
              echo "✅ Деплой успешен!"
            else
              echo "❌ Приложение не отвечает!"
              docker-compose logs --tail=50
              exit 1
            fi
